// src/lib/subscriptionUtils.ts
import { prisma } from '@/lib/prisma';

// 添加明确的类型定义
interface SubscriptionWithCategory {
  id: number;
  name: string;
  description: string | null;
  amount: number;
  currency: string;
  billingDay: number;
  startDate: Date;
  endDate: Date | null;
  userId: string;
  categoryId: number;
  isActive: boolean;
  category: {
    id: number;
    name: string;
    color: string | null;
    parentId: number | null;
  };
}

interface GenerateResult {
  success: boolean;
  generatedCount: number;
  expenses: any[];
  error?: string;
}

/**
 * 检查并生成用户的订阅账单
 * 每次用户打开页面时调用
 */
export async function checkAndGenerateSubscriptionBills(userId: string): Promise<GenerateResult> {
  try {
    const today = new Date();
    const todayDay = today.getDate();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth();
    
    // 获取所有激活的订阅
    const activeSubscriptions = await prisma.subscription.findMany({
      where: {
        userId,
        isActive: true,
        startDate: { lte: today },
        OR: [
          { endDate: null }, // 长期订阅
          { endDate: { gte: today } } // 还未到期
        ]
      },
      include: {
        category: {
          select: {
            id: true,
            name: true,
            color: true,
            parentId: true
          }
        }
      }
    });

    const generatedExpenses = [];

    for (const subscription of activeSubscriptions) {
      // 检查今天是否是账单日
      const shouldGenerateToday = subscription.billingDay === todayDay;
      
      if (shouldGenerateToday) {
        // 检查本月是否已经生成过账单
        const existingExpense = await prisma.expense.findFirst({
          where: {
            subscriptionId: subscription.id,
            date: {
              gte: new Date(currentYear, currentMonth, 1),
              lt: new Date(currentYear, currentMonth + 1, 1)
            }
          }
        });

        if (!existingExpense) {
          // 生成新的支出记录
          const newExpense = await prisma.expense.create({
            data: {
              amount: subscription.amount,
              note: `${subscription.name}${subscription.description ? ` - ${subscription.description}` : ''}`,
              date: today,
              categoryId: subscription.categoryId,
              userId: subscription.userId,
              currency: subscription.currency,
              subscriptionId: subscription.id,
              isAutoGenerated: true
            },
            include: {
              category: {
                select: {
                  id: true,
                  name: true,
                  color: true,
                  parentId: true
                }
              }
            }
          });

          generatedExpenses.push(newExpense);
        }
      }
    }

    return {
      success: true,
      generatedCount: generatedExpenses.length,
      expenses: generatedExpenses
    };

  } catch (error) {
    console.error('生成订阅账单失败:', error);
    return {
      success: false,
      generatedCount: 0,
      expenses: [],
      error: error instanceof Error ? error.message : '生成订阅账单失败'
    };
  }
}

/**
 * 检查并生成历史遗漏的订阅账单
 */
export async function generateMissedSubscriptionBills(
  userId: string, 
  maxMonthsBack: number = 3
): Promise<GenerateResult> {
  try {
    const today = new Date();
    const cutoffDate = new Date(today);
    cutoffDate.setMonth(today.getMonth() - maxMonthsBack);

    const activeSubscriptions = await prisma.subscription.findMany({
      where: {
        userId,
        isActive: true,
        startDate: { lte: today },
        OR: [
          { endDate: null },
          { endDate: { gte: cutoffDate } }
        ]
      },
      include: {
        category: {
          select: {
            id: true,
            name: true,
            color: true,
            parentId: true
          }
        }
      }
    });

    const generatedExpenses = [];

    for (const subscription of activeSubscriptions) {
      // 从订阅开始日期或截止日期开始检查
      const checkStartDate = subscription.startDate > cutoffDate ? subscription.startDate : cutoffDate;
      
      // 生成所有遗漏的账单
      const missedBills = getMissedBillingDates(
        subscription,
        checkStartDate,
        today
      );

      for (const billDate of missedBills) {
        // 检查是否已存在（精确到日期）
        const dayStart = new Date(billDate);
        dayStart.setHours(0, 0, 0, 0);
        const dayEnd = new Date(billDate);
        dayEnd.setHours(23, 59, 59, 999);

        const existing = await prisma.expense.findFirst({
          where: {
            subscriptionId: subscription.id,
            date: {
              gte: dayStart,
              lte: dayEnd
            }
          }
        });

        if (!existing) {
          const newExpense = await prisma.expense.create({
            data: {
              amount: subscription.amount,
              note: `${subscription.name}${subscription.description ? ` - ${subscription.description}` : ''}`,
              date: billDate,
              categoryId: subscription.categoryId,
              userId: subscription.userId,
              currency: subscription.currency,
              subscriptionId: subscription.id,
              isAutoGenerated: true
            },
            include: {
              category: {
                select: {
                  id: true,
                  name: true,
                  color: true,
                  parentId: true
                }
              }
            }
          });

          generatedExpenses.push(newExpense);
        }
      }
    }

    return {
      success: true,
      generatedCount: generatedExpenses.length,
      expenses: generatedExpenses
    };

  } catch (error) {
    console.error('生成历史订阅账单失败:', error);
    return {
      success: false,
      generatedCount: 0,
      expenses: [],
      error: error instanceof Error ? error.message : '生成历史订阅账单失败'
    };
  }
}

/**
 * 计算遗漏的账单日期
 */
function getMissedBillingDates(
  subscription: SubscriptionWithCategory,
  startDate: Date,
  endDate: Date
): Date[] {
  const dates: Date[] = [];
  const current = new Date(startDate);
  
  // 确保从当月开始
  current.setDate(1);
  
  while (current <= endDate) {
    // 设置为当月的账单日
    const year = current.getFullYear();
    const month = current.getMonth();
    
    // 获取当月的天数
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    // 如果账单日超过当月天数，使用当月最后一天
    const actualBillingDay = Math.min(subscription.billingDay, daysInMonth);
    
    const billDate = new Date(year, month, actualBillingDay);
    
    // 只添加在范围内且不是未来日期的账单
    if (billDate >= startDate && billDate <= endDate && billDate <= new Date()) {
      dates.push(new Date(billDate));
    }
    
    // 移动到下个月
    current.setMonth(current.getMonth() + 1);
  }
  
  return dates;
}

/**
 * 获取用户的订阅统计信息
 */
export async function getUserSubscriptionStats(userId: string) {
  try {
    const stats = await prisma.subscription.groupBy({
      by: ['isActive'],
      where: {
        userId
      },
      _count: {
        id: true
      },
      _sum: {
        amount: true
      }
    });

    const activeStats = stats.find(s => s.isActive) || { _count: { id: 0 }, _sum: { amount: 0 } };
    const inactiveStats = stats.find(s => !s.isActive) || { _count: { id: 0 }, _sum: { amount: 0 } };

    return {
      totalSubscriptions: activeStats._count.id + inactiveStats._count.id,
      activeSubscriptions: activeStats._count.id,
      inactiveSubscriptions: inactiveStats._count.id,
      monthlyTotal: activeStats._sum.amount || 0
    };

  } catch (error) {
    console.error('获取订阅统计失败:', error);
    return {
      totalSubscriptions: 0,
      activeSubscriptions: 0,
      inactiveSubscriptions: 0,
      monthlyTotal: 0
    };
  }
}

/**
 * 停用订阅
 */
export async function deactivateSubscription(subscriptionId: number, userId: string) {
  try {
    const subscription = await prisma.subscription.update({
      where: {
        id: subscriptionId,
        userId // 确保只能操作自己的订阅
      },
      data: {
        isActive: false
      }
    });

    return { success: true, subscription };
  } catch (error) {
    console.error('停用订阅失败:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '停用订阅失败' 
    };
  }
}

/**
 * 激活订阅
 */
export async function activateSubscription(subscriptionId: number, userId: string) {
  try {
    const subscription = await prisma.subscription.update({
      where: {
        id: subscriptionId,
        userId
      },
      data: {
        isActive: true
      }
    });

    return { success: true, subscription };
  } catch (error) {
    console.error('激活订阅失败:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : '激活订阅失败' 
    };
  }
}